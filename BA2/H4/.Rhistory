##
## function for calculating the marginal log-likelihood
## of the alpha and beta parameters to the hierarchical
## beta-binomial model
ab.marg.llik <- function(alpha, beta, y, n)
{
m <- length(y)
const <- m*(lgamma(alpha + beta) - lgamma(alpha) - lgamma(beta))
lprod <- sum(lgamma(alpha + y) + lgamma(beta + n - y) - lgamma(alpha + beta + n))
return(const + lprod)
}
## ab.lprior:
##
## function for evaluating the log-prior of alpha and
## beta for the hierarchical beta-binomial model
ab.lprior <- function(alpha, beta)
{
return(-(5/2)*log(alpha + beta))
}
## set up the MCMC, allocate space, etc
S <- 100000
alpha <- beta <- rep(NA, S)
alpha[1] <- 1
beta[1] <- 1
lpost <- ab.marg.llik(alpha[1], beta[1], y, n) + ab.lprior(alpha[1], beta[1])
L <- 1
U <- 2
## MCMC rounds for alpha and beta
for(s in 2:S) {
## propose new alpha and calculate new log posteiror
aprime <- runif(1, L*alpha[s-1]/U, L*alpha[s-1]*U)
lprime <- ab.marg.llik(aprime, beta[s-1], y, n) + ab.lprior(aprime, beta[s-1])
## accept or reject the proposal
if(runif(1) < exp(lprime - lpost) * alpha[s-1]/aprime) {  ## accept
alpha[s] <- aprime
lpost <- lprime
} else alpha[s] <- alpha[s-1]  ## reject
## propose new BETA and calculate new log posteiror
bprime <- runif(1, L*beta[s-1]/U, U*beta[s-1]*L)
lprime <- ab.marg.llik(alpha[s], bprime, y, n) + ab.lprior(alpha[s], bprime)
## accept or reject the proposal
if(runif(1) < exp(lprime - lpost) * beta[s-1]/bprime) {  ## accept
beta[s] <- bprime
lpost <- lprime
} else beta[s] <- beta[s-1]  ## reject
}
##
## converting samples of alpha and beta into samples of theta
##
## allocate space for the samples
theta <- matrix(NA, nrow=S, ncol=m)
## gather the samples by direct MC
for(j in 1:m) {
theta[,j] <- rbeta(S, alpha + y[j], beta + n[j] - y[j])
}
# c)
alpha.mean = mean(alpha)
beta.mean = mean(beta)
theta.mean = mean(theta)
m
dim(theta)
bikes
alpha.mean
beta.mean
theta.mean
bikes
theta.mean
alpha.mean = mean(alpha)
beta.mean = mean(beta)
theta.means = mean(theta)
theta.means
?mean
theta[,1]
dim(theta[,1])
dim(theta[,:])
theta[1,]
alpha.mean = mean(alpha)
beta.mean = mean(beta)
theta.means = NULL
for(j in 1:m){
theta.means = append(theta.means, mean(theta[,j]))
}
theta.means
library(ggplot)
library(ggplot2)
install.packages("ggplot2")
bikes
bikes$bikes / bikes$other
bikes$bikes / (bikes$bikes+bikes$other)
bikes
raw_proportions = bikes$bikes / (bikes$bikes+bikes$other)
raw_proportions
bikes
j
j=seq(1,10)
j
?plot
plot(j, raw_proportions)
plot(j, raw_proportions, type='l-')
plot(j, raw_proportions, type='b')
plot(j, raw_proportions, type='b', col='red')
j=seq(1,10)
plot(j, raw_proportions, type='b', col='red')
lines(j, theta.means, type='b', col='blue')
j=seq(1,10)
plot(j, raw_proportions, type='b', col='red')
lines(j, theta.means, type='b', col='green')
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue')
lines(j, theta.means, type='b', col='orange')
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue', ylab='p')
lines(j, theta.means, type='b', col='orange')
legend()
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue', ylab='p')
axis(1, xaxp=j, las=2)
lines(j, theta.means, type='b', col='orange')
?axis
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue', ylab='p')
axis(1, xaxp=c(1, 10, 10), las=2)
lines(j, theta.means, type='b', col='orange')
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue', ylab='p')
axis(side = 1, at = j,labels = T)
lines(j, theta.means, type='b', col='orange')
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue', ylab='p')
lines(j, theta.means, type='b', col='orange')
axis(side = 1, at = j,labels = T)
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue', ylab='p')
lines(j, theta.means, type='b', col='orange')
axis(side = 1, at = j,labels = F)
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue', ylab='p', xaxt='n')
lines(j, theta.means, type='b', col='orange')
axis(side = 1, at = j,labels = T)
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue', ylab='p', xaxt='n')
lines(j, theta.means, type='b', col='orange', xaxt='n')
axis(side = 1, at = j,labels = T)
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue', ylab='p', xaxt='n')
lines(j, theta.means, type='b', col='orange')
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue', ylab='p', xaxt='n')
lines(j, theta.means, type='b', col='orange')
axis(side = 1, at = j,labels = T)
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue', ylab='p', xaxt='n')
lines(j, theta.means, type='b', col='orange')
axis(side = 1, at = j,labels = T)
legend(legend=c('raw', 'posterior'),
col=c('blue','orange'))
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue', ylab='p', xaxt='n')
lines(j, theta.means, type='b', col='orange')
axis(side = 1, at = j,labels = T)
legend(x=1, legend=c('raw', 'posterior'),
col=c('blue','orange'))
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue', ylab='p', xaxt='n')
lines(j, theta.means, type='b', col='orange')
axis(side = 1, at = j,labels = T)
legend(x=1,y=0.4, legend=c('raw', 'posterior'),
col=c('blue','orange'))
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue', ylab='p', xaxt='n')
lines(j, theta.means, type='b', col='orange')
axis(side = 1, at = j,labels = T)
legend(x=1,y=0.4, legend=c('raw', 'posterior'),
col=c('blue','orange'), lty=1:2, cex=0.8)
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue', ylab='p', xaxt='n')
lines(j, theta.means, type='b', col='orange', lty=2)
axis(side = 1, at = j,labels = T)
legend(x=1,y=0.4, legend=c('raw', 'posterior'),
col=c('blue','orange'), lty=1:2, cex=0.8)
?legend
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue', ylab='p', xaxt='n')
lines(j, theta.means, type='b', col='orange', lty=2)
axis(side = 1, at = j,labels = T)
legend(x='topleft', legend=c('raw', 'posterior'),
col=c('blue','orange'), lty=1:2, cex=0.8)
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue', ylab='p', xaxt='n')
lines(j, theta.means, type='b', col='green', lty=2)
axis(side = 1, at = j,labels = T)
legend(x='topleft', legend=c('raw', 'posterior'),
col=c('blue','orange'), lty=1:2, cex=0.8)
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue', ylab='p', xaxt='n')
lines(j, theta.means, type='b', col='red', lty=2)
axis(side = 1, at = j,labels = T)
legend(x='topleft', legend=c('raw', 'posterior'),
col=c('blue','orange'), lty=1:2, cex=0.8)
j=seq(1,10)
plot(j, raw_proportions, type='b', col='blue', ylab='p', xaxt='n')
lines(j, theta.means, type='b', col='red', lty=2)
axis(side = 1, at = j,labels = T)
legend(x='topleft', legend=c('raw', 'posterior'),
col=c('blue','red'), lty=1:2, cex=0.8)
alpha.mean
alpha
p = alpha/(alpha+beta)
quantile(p, c(0.025, 0.975))
alpha/(alpha+beta)
# e)
p = alpha/(alpha+beta)
quantile(p, c(0.025, 0.975))
hist(alpha)
hist(beta)
hist(theta[1,])
theta[1,]
hist(theta[,1])
hist(theta[,2])
hist(theta[,3])
x=seq(-1,1,0.1)
plot(x, theta[,1])
?seq
length(theta[,1])
x=seq(-1,1,length.out=10000)
plot(x, theta[,1])
x
length(x)
length(theta[,1])
x=seq(-1,1,length.out=100000)
plot(x, theta[,1])
## read in the data file
setwd('/home/tuomas/R/Projects/DATA.STAT.730/H4')
bikes <- read.table("bikes_dat.txt", header=TRUE)
y <- bikes$bikes
n <- y + bikes$other
m <- length(n)
## ab.marg.llik:
##
## function for calculating the marginal log-likelihood
## of the alpha and beta parameters to the hierarchical
## beta-binomial model
ab.marg.llik <- function(alpha, beta, y, n)
{
m <- length(y)
const <- m*(lgamma(alpha + beta) - lgamma(alpha) - lgamma(beta))
lprod <- sum(lgamma(alpha + y) + lgamma(beta + n - y) - lgamma(alpha + beta + n))
return(const + lprod)
}
## ab.lprior:
##
## function for evaluating the log-prior of alpha and
## beta for the hierarchical beta-binomial model
ab.lprior <- function(alpha, beta, c, d, e, f)
{
return((c-1)*log(alpha) - alpha*d + (e-1)*log(alpha) - beta*f)
}
## set up the MCMC, allocate space, etc
S <- 100000
c=10
d=1
e=10
f=1
alpha <- beta <- rep(NA, S)
alpha[1] <- 1
beta[1] <- 1
lpost <- ab.marg.llik(alpha[1], beta[1], y, n) + ab.lprior(alpha[1], beta[1], c,d,e,f)
## MCMC rounds for alpha and beta
for(s in 2:S) {
## propose new alpha and calculate new log posteiror
aprime = rnorm(1, alpha[s-1], 20)
lprime <- ab.marg.llik(aprime, beta[s-1], y, n) + ab.lprior(aprime, beta[s-1], c,d,e,f)
## accept or reject the proposal
if(runif(1) < exp(lprime - lpost) * alpha[s-1]/aprime) {  ## accept
alpha[s] <- aprime
lpost <- lprime
} else alpha[s] <- alpha[s-1]  ## reject
## propose new BETA and calculate new log posteiror
bprime <- rnorm(1, beta[s-1], 20)
lprime <- ab.marg.llik(alpha[s], bprime, y, n) + ab.lprior(alpha[s], bprime, c,d,e,f)
## accept or reject the proposal
if(runif(1) < exp(lprime - lpost) * beta[s-1]/bprime) {  ## accept
beta[s] <- bprime
lpost <- lprime
} else beta[s] <- beta[s-1]  ## reject
}
##
## converting samples of alpha and beta into samples of theta
##
## allocate space for the samples
theta <- matrix(NA, nrow=S, ncol=m)
## gather the samples by direct MC
for(j in 1:m) {
theta[,j] <- rbeta(S, alpha + y[j], beta + n[j] - y[j])
}
alpha
## set up the MCMC, allocate space, etc
S <- 100000
c=10
d=1
e=10
f=1
alpha <- beta <- rep(NA, S)
alpha[1] <- 1
beta[1] <- 1
lpost <- ab.marg.llik(alpha[1], beta[1], y, n) + ab.lprior(alpha[1], beta[1], c,d,e,f)
## MCMC rounds for alpha and beta
for(s in 2:S) {
## propose new alpha and calculate new log posteiror
aprime = rnorm(1, alpha[s-1], 20)
lprime <- ab.marg.llik(aprime, beta[s-1], y, n) + ab.lprior(aprime, beta[s-1], c,d,e,f)
## accept or reject the proposal
if(runif(1) < exp(lprime - lpost) * alpha[s-1]/aprime) {  ## accept
alpha[s] <- aprime
lpost <- lprime
} else alpha[s] <- alpha[s-1]  ## reject
## propose new BETA and calculate new log posteiror
bprime <- rnorm(1, beta[s-1], 20)
lprime <- ab.marg.llik(alpha[s], bprime, y, n) + ab.lprior(alpha[s], bprime, c,d,e,f)
## accept or reject the proposal
if(runif(1) < exp(lprime - lpost) * beta[s-1]/bprime) {  ## accept
beta[s] <- bprime
lpost <- lprime
} else beta[s] <- beta[s-1]  ## reject
}
## set up the MCMC, allocate space, etc
S <- 100000
c=10
d=1
e=10
f=1
alpha <- beta <- rep(NA, S)
alpha[1] <- 1
beta[1] <- 1
lpost <- ab.marg.llik(alpha[1], beta[1], y, n) + ab.lprior(alpha[1], beta[1], c,d,e,f)
lpost
## set up the MCMC, allocate space, etc
S <- 100000
c=1
d=1
e=1
f=1
alpha <- beta <- rep(NA, S)
alpha[1] <- 1
beta[1] <- 1
lpost <- ab.marg.llik(alpha[1], beta[1], y, n) + ab.lprior(alpha[1], beta[1], c,d,e,f)
## MCMC rounds for alpha and beta
for(s in 2:S) {
## propose new alpha and calculate new log posteiror
aprime = rnorm(1, alpha[s-1], 20)
lprime <- ab.marg.llik(aprime, beta[s-1], y, n) + ab.lprior(aprime, beta[s-1], c,d,e,f)
## accept or reject the proposal
if(runif(1) < exp(lprime - lpost) * alpha[s-1]/aprime) {  ## accept
alpha[s] <- aprime
lpost <- lprime
} else alpha[s] <- alpha[s-1]  ## reject
## propose new BETA and calculate new log posteiror
bprime <- rnorm(1, beta[s-1], 20)
lprime <- ab.marg.llik(alpha[s], bprime, y, n) + ab.lprior(alpha[s], bprime, c,d,e,f)
## accept or reject the proposal
if(runif(1) < exp(lprime - lpost) * beta[s-1]/bprime) {  ## accept
beta[s] <- bprime
lpost <- lprime
} else beta[s] <- beta[s-1]  ## reject
}
alpha
beta
## set up the MCMC, allocate space, etc
S <- 100000
c=1
d=1
e=1
f=1
alpha <- beta <- rep(NA, S)
alpha[1] <- 1
beta[1] <- 1
lpost <- ab.marg.llik(alpha[1], beta[1], y, n) + ab.lprior(alpha[1], beta[1], c,d,e,f)
## MCMC rounds for alpha and beta
for(s in 2:S) {
## propose new alpha and calculate new log posteiror
aprime = rnorm(1, alpha[s-1], 20)
lprime <- ab.marg.llik(aprime, beta[s-1], y, n) + ab.lprior(aprime, beta[s-1], c,d,e,f)
## accept or reject the proposal
if(runif(1) < exp(lprime - lpost) * alpha[s-1]/aprime) {  ## accept
alpha[s] <- aprime
lpost <- lprime
} else alpha[s] <- alpha[s-1]  ## reject
## propose new BETA and calculate new log posteiror
bprime <- rnorm(1, alpha[s-1], 20)
lprime <- ab.marg.llik(alpha[s], bprime, y, n) + ab.lprior(alpha[s], bprime, c,d,e,f)
## accept or reject the proposal
if(runif(1) < exp(lprime - lpost) * beta[s-1]/bprime) {  ## accept
beta[s] <- bprime
lpost <- lprime
} else beta[s] <- beta[s-1]  ## reject
}
## set up the MCMC, allocate space, etc
S <- 100000
c=5
d=1
e=5
f=1
alpha <- beta <- rep(NA, S)
alpha[1] <- 1
beta[1] <- 1
lpost <- ab.marg.llik(alpha[1], beta[1], y, n) + ab.lprior(alpha[1], beta[1], c,d,e,f)
## MCMC rounds for alpha and beta
for(s in 2:S) {
## propose new alpha and calculate new log posteiror
aprime = rnorm(1, alpha[s-1], 20)
lprime <- ab.marg.llik(aprime, beta[s-1], y, n) + ab.lprior(aprime, beta[s-1], c,d,e,f)
## accept or reject the proposal
if(runif(1) < exp(lprime - lpost) * alpha[s-1]/aprime) {  ## accept
alpha[s] <- aprime
lpost <- lprime
} else alpha[s] <- alpha[s-1]  ## reject
## propose new BETA and calculate new log posteiror
bprime <- rnorm(1, alpha[s-1], 20)
lprime <- ab.marg.llik(alpha[s], bprime, y, n) + ab.lprior(alpha[s], bprime, c,d,e,f)
## accept or reject the proposal
if(runif(1) < exp(lprime - lpost) * beta[s-1]/bprime) {  ## accept
beta[s] <- bprime
lpost <- lprime
} else beta[s] <- beta[s-1]  ## reject
}
NaN
1<NaN
type(NA)
typeof(NA)
## set up the MCMC, allocate space, etc
S <- 100000
c=5
d=1
e=5
f=1
alpha <- beta <- rep(NA, S)
alpha[1] <- 1
beta[1] <- 1
lpost <- ab.marg.llik(alpha[1], beta[1], y, n) + ab.lprior(alpha[1], beta[1], c,d,e,f)
## MCMC rounds for alpha and beta
for(s in 2:S) {
## propose new alpha and calculate new log posteiror
aprime = rnorm(1, alpha[s-1], 20)
lprime <- ab.marg.llik(aprime, beta[s-1], y, n) + ab.lprior(aprime, beta[s-1], c,d,e,f)
cat(aprime)
## accept or reject the proposal
if(runif(1) < exp(lprime - lpost) * alpha[s-1]/aprime) {  ## accept
alpha[s] <- aprime
lpost <- lprime
} else alpha[s] <- alpha[s-1]  ## reject
## propose new BETA and calculate new log posteiror
bprime <- rnorm(1, alpha[s-1], 20)
lprime <- ab.marg.llik(alpha[s], bprime, y, n) + ab.lprior(alpha[s], bprime, c,d,e,f)
## accept or reject the proposal
if(runif(1) < exp(lprime - lpost) * beta[s-1]/bprime) {  ## accept
beta[s] <- bprime
lpost <- lprime
} else beta[s] <- beta[s-1]  ## reject
}
alpha[1]
alpha[2]
alpha[3]
alpha[4]
## set up the MCMC, allocate space, etc
S <- 100000
c=5
d=1
e=5
f=1
alpha <- beta <- rep(NA, S)
alpha[1] <- 1
beta[1] <- 1
lpost <- ab.marg.llik(alpha[1], beta[1], y, n) + ab.lprior(alpha[1], beta[1], c,d,e,f)
## MCMC rounds for alpha and beta
for(s in 2:S) {
## propose new alpha and calculate new log posteiror
aprime = rnorm(1, alpha[s-1], 20)
lprime <- ab.marg.llik(aprime, beta[s-1], y, n) + ab.lprior(aprime, beta[s-1], c,d,e,f)
cat(lprime)
## accept or reject the proposal
if(runif(1) < exp(lprime - lpost) * alpha[s-1]/aprime) {  ## accept
alpha[s] <- aprime
lpost <- lprime
} else alpha[s] <- alpha[s-1]  ## reject
## propose new BETA and calculate new log posteiror
bprime <- rnorm(1, alpha[s-1], 20)
lprime <- ab.marg.llik(alpha[s], bprime, y, n) + ab.lprior(alpha[s], bprime, c,d,e,f)
## accept or reject the proposal
if(runif(1) < exp(lprime - lpost) * beta[s-1]/bprime) {  ## accept
beta[s] <- bprime
lpost <- lprime
} else beta[s] <- beta[s-1]  ## reject
}
aprime = rnorm(1, alpha[1], 20)
ab.lprior(aprime, beta[1], c,d,e,f)
aprime = rnorm(1, alpha[1], 20)
ab.lprior(aprime, beta[1], c,d,e,f)
aprime = rnorm(1, alpha[1], 20)
ab.lprior(aprime, beta[1], c,d,e,f)
aprime = rnorm(1, alpha[1], 20)
ab.lprior(aprime, beta[1], c,d,e,f)
aprime = rnorm(1, alpha[1], 20)
ab.lprior(aprime, beta[1], c,d,e,f)
aprime = rnorm(1, alpha[1], 20)
ab.lprior(aprime, beta[1], c,d,e,f)
aprime = rnorm(1, alpha[1], 20)
ab.lprior(aprime, beta[1], c,d,e,f)
aprime = rnorm(1, alpha[1], 20)
ab.lprior(aprime, beta[1], c,d,e,f)
aprime = rnorm(1, alpha[1], 20)
ab.lprior(aprime, beta[1], c,d,e,f)
aprime
